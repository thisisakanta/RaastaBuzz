version: "3.8"

services:
  # PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: raastabuzz_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - raastabuzz_postgres_data:/var/lib/postgresql/data
      # Optional: Add init scripts if needed
      # - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - raastabuzz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: raastabuzz_backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_DRIVER: ${SPRING_DATASOURCE_DRIVER}
      SPRING_DATASOURCE_DIALECT: ${SPRING_DATASOURCE_DIALECT}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL}
      SERVER_PORT: ${SERVER_PORT}
      
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - raastabuzz-network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: raastabuzz_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - raastabuzz-network

volumes:
  raastabuzz_postgres_data:

networks:
  raastabuzz-network:
    driver: bridge

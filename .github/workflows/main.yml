name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # - name: Run tests
      #   run: |
      #     cd Backend
      #     # mvn clean test
      #   env:
      #     SPRING_PROFILES_ACTIVE: test
      #     SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
      #     SPRING_DATASOURCE_USERNAME: sa
      #     SPRING_DATASOURCE_PASSWORD: password
      #     SPRING_DATASOURCE_DRIVER: org.h2.Driver
      #     SPRING_DATASOURCE_DIALECT: org.hibernate.dialect.H2Dialect
      #     SPRING_JPA_HIBERNATE_DDL_AUTO: update
      #     SPRING_JPA_SHOW_SQL: false
      #     FIREBASE_KEY: "${{ secrets.FIREBASE_KEY }}$"
      #     FIREBASE_STORAGE_BUCKET: test-bucket
      #     JWT_SECRET: ${{ secrets.JWT_SECRET }}

      #. Build backend JAR
      - name: Build backend JAR
        run: |
          cd Backend
          mvn clean package -DskipTests
          ls -la target/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: Frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd Frontend
          npm ci
      # 4. Login to Docker Hub
      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # 5. Build and push backend
      - name: Build and push backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/raastabuzz-backend:latest ./Backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/raastabuzz-backend:latest

      # 6. Build and push frontend
      - name: Build and push frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/raastabuzz-frontend:latest ./Frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/raastabuzz-frontend:latest

      # 7. Deploy to AWS EC2 via SSH
      - name: Deploy to AWS EC2
        run: |
          # Save SSH key
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

          # Create docker-compose file with Docker Hub images
          cat > docker-compose.yml << 'COMPOSE_EOF'
          version: '3.8'
          services:
            database:
              image: postgres:16-alpine
              container_name: raastabuzz_db
              environment:
                POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              ports:
                - "5432:5432"
              networks:
                - app-network
              restart: unless-stopped

            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/raastabuzz-backend:latest
              container_name: raastabuzz_backend
              environment:
                SPRING_PROFILES_ACTIVE: ${{ secrets.SPRING_PROFILES_ACTIVE }}
                SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
                SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
                SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
                SPRING_DATASOURCE_DRIVER: ${{ secrets.SPRING_DATASOURCE_DRIVER }}
                SPRING_DATASOURCE_DIALECT: ${{ secrets.SPRING_DATASOURCE_DIALECT }}
                SPRING_JPA_HIBERNATE_DDL_AUTO: ${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}
                SPRING_JPA_SHOW_SQL: ${{ secrets.SPRING_JPA_SHOW_SQL }}
                SERVER_PORT: ${{ secrets.SERVER_PORT }}
                FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
                FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
              ports:
                - "8080:8080"
              depends_on:
                - database
              networks:
                - app-network
              restart: unless-stopped

            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/raastabuzz-frontend:latest
              container_name: raastabuzz_frontend
              ports:
                - "3000:80"
              depends_on:
                - backend
              networks:
                - app-network
              restart: unless-stopped

          volumes:
            postgres_data:

          networks:
            app-network:
              driver: bridge
          COMPOSE_EOF


          # Connect to EC2 and create app directory
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }} "mkdir -p ~/raastabuzz-app"

          # Copy docker-compose file to EC2
          scp -i key.pem -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }}:~/raastabuzz-app/

          # Deploy on EC2
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }} << 'DEPLOY_EOF'
            cd ~/raastabuzz-app
            docker-compose pull
            docker-compose down
            docker-compose up -d
            sleep 15
            docker-compose ps
            echo " Deployment completed!"
            echo "Frontend: http://${{ secrets.AWS_EC2_HOST }}:3000"
            echo "Backend: http://${{ secrets.AWS_EC2_HOST }}:8080"
          DEPLOY_EOF

          # Clean up
          rm -f key.pem docker-compose.yml
